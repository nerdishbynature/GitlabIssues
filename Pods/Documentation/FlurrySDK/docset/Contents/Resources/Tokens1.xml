<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Flurry.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Flurry</TokenIdentifier>
			<Abstract type="html">@brief Provides all available methods for defining and reporting Analytics from use
of your app.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setAppVersion:</TokenIdentifier>
			<Abstract type="html">@brief Explicitly specifies the App Version that Flurry will use to group Analytics data.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setAppVersion:(NSString *)version</Declaration>
			<Parameters>
				<Parameter>
					<Name>version</Name>
					<Abstract type="html">The custom version name.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAppVersion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/getFlurryAgentVersion</TokenIdentifier>
			<Abstract type="html">@brief Retrieves the Flurry Agent Build Version.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/Flurry/setDebugLogEnabled:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)getFlurryAgentVersion</Declaration>
			
			<ReturnValue><Abstract type="html">The agent version of the Flurry SDK.</Abstract></ReturnValue>
			<Anchor>//api/name/getFlurryAgentVersion</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setShowErrorInLogEnabled:</TokenIdentifier>
			<Abstract type="html">@brief Displays an exception in the debug log if thrown during a Session.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/Flurry/logError:message:error:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (void)setShowErrorInLogEnabled:(BOOL)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">@c YES to show errors in debug logs, @c NO to omit errors in debug logs.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setShowErrorInLogEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setDebugLogEnabled:</TokenIdentifier>
			<Abstract type="html">@brief Generates debug logs to console.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setDebugLogEnabled:(BOOL)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">@c YES to show debug logs, @c NO to omit debug logs.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDebugLogEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setSessionContinueSeconds:</TokenIdentifier>
			<Abstract type="html">@brief Set the timeout for expiring a Flurry session.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setSessionContinueSeconds:(int)seconds</Declaration>
			<Parameters>
				<Parameter>
					<Name>seconds</Name>
					<Abstract type="html">The time in seconds to set the session timeout to.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSessionContinueSeconds:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setSecureTransportEnabled:</TokenIdentifier>
			<Abstract type="html">@brief Send data over a secure transport.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setSecureTransportEnabled:(BOOL)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">@c YES to send data over secure connection.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSecureTransportEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setCrashReportingEnabled:</TokenIdentifier>
			<Abstract type="html">@brief Enable automatic collection of crash reports.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setCrashReportingEnabled:(BOOL)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">@c YES to enable collection of crash reports.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCrashReportingEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/startSession:</TokenIdentifier>
			<Abstract type="html">*  @brief Start a Flurry session for the project denoted by @c apiKey.
*  @since 2.6
*
*  This method serves as the entry point to Flurry Analytics collection.  It must be
*  called in the scope of @c applicationDidFinishLaunching.  The session will continue
*  for the period the app is in the foreground until your app is backgrounded for the
*  time specified in #setSessionContinueSeconds:. If the app is resumed in that period
*  the session will continue, otherwise a new session will begin.
*
*  Crash reporting will not be enabled. See #startSession:enableCrashReporting: for
*  more information.
*
*  @note If testing on a simulator, please be sure to send App to background via home
*  button. Flurry depends on the iOS lifecycle to be complete for full reporting.
*
* @see #setSessionContinueSeconds: for details on setting a custom session timeout.
*
* @code
  - (void)applicationDidFinishLaunching:(UIApplication )application
{
// Optional Flurry startup methods
[Flurry startSession:@&quot;YOURAPIKEY&quot;];
// ....
}
* @endcode
*
* @param apiKey The API key for this project.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)startSession:(NSString *)apiKey</Declaration>
			
			
			<Anchor>//api/name/startSession:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/startSession:withOptions:</TokenIdentifier>
			<Abstract type="html">*  @brief Start a Flurry session for the project denoted by @c apiKey.
*  @since 4.0.8
*
*  This method serves as the entry point to Flurry Analytics collection.  It must be
*  called in the scope of @c applicationDidFinishLaunching passing in the launchOptions param.
*  The session will continue
*  for the period the app is in the foreground until your app is backgrounded for the
*  time specified in #setSessionContinueSeconds:. If the app is resumed in that period
*  the session will continue, otherwise a new session will begin.
*
*  @note If testing on a simulator, please be sure to send App to background via home
*  button. Flurry depends on the iOS lifecycle to be complete for full reporting.
*
* @see #setSessionContinueSeconds: for details on setting a custom session timeout.
*
* @code
  - (BOOL) application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
// Optional Flurry startup methods
[Flurry startSession:@&quot;YOURAPIKEY&quot; withOptions:launchOptions];
// ....
}
* @endcode
*
* @param apiKey The API key for this project.
 @param options passed launchOptions from the applicatin&apos;s didFinishLaunchingWithOptions:(NSDictionary )launchOptions</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)startSession:(NSString *)apiKey withOptions:(id)options</Declaration>
			
			
			<Anchor>//api/name/startSession:withOptions:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/logEvent:</TokenIdentifier>
			<Abstract type="html">*  @brief Records a custom event specified by @c eventName.
*  @since 2.8.4
*
*  This method allows you to specify custom events within your app.  As a general rule
*  you should capture events related to user navigation within your app, any action
*  around monetization, and other events as they are applicable to tracking progress
*  towards your business goals.
*
*  @note You should not pass private or confidential information about your users in a
*  custom event. \n
*  Where applicable, you should make a concerted effort to use timed events with
*  parameters (#logEvent:withParameters:timed: or events with parameters
*  (#logEvent:withParameters:. This provides valuable information around the time the user
*  spends within an action (e.g. - time spent on a level or viewing a page) or characteristics
*  of an action (e.g. - Buy Event that has a Parameter of Widget with Value Golden Sword).
*
*  @see #logEvent:withParameters: for details on storing events with parameters. \n
*  #logEvent:timed: for details on storing timed events. \n
*  #logEvent:withParameters:timed: for details on storing timed events with parameters. \n
*  #endTimedEvent:withParameters: for details on stopping a timed event and (optionally) updating
*  parameters.
*
*  @code
*  - (void)interestingAppAction
{
[Flurry logEvent:@&quot;Interesting_Action&quot;];
// Perform interesting action
}
*  @endcode
*
*  @param eventName Name of the event. For maximum effectiveness, we recommend using a naming scheme
*  that can be easily understood by non-technical people in your business domain.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)logEvent:(NSString *)eventName</Declaration>
			
			
			<Anchor>//api/name/logEvent:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/logEvent:withParameters:</TokenIdentifier>
			<Abstract type="html">*  @brief Records a custom parameterized event specified by @c eventName with @c parameters.
*  @since 2.8.4
*
*  This method overrides #logEvent to allow you to associate parameters with an event. Parameters
*  are extremely valuable as they allow you to store characteristics of an action. For example,
*  if a user purchased an item it may be helpful to know what level that user was on.
*  By setting this parameter you will be able to view a distribution of levels for the purcahsed
*  event on the Flurrly Dev Portal.
*
*  @note You should not pass private or confidential information about your users in a
*  custom event. \n
*  A maximum of 10 parameter names may be associated with any event. Sending
*  over 10 parameter names with a single event will result in no parameters being logged
*  for that event. You may specify an infinite number of Parameter values. For example,
*  a Search Box would have 1 parameter name (e.g. - Search Box) and many values, which would
*  allow you to see what values users look for the most in your app. \n
*  Where applicable, you should make a concerted effort to use timed events with
*  parameters (#logEvent:withParameters:timed:. This provides valuable information
*  around the time the user spends within an action (e.g. - time spent on a level or
*  viewing a page).
*
*  @see #logEvent:withParameters:timed: for details on storing timed events with parameters. \n
*  #endTimedEvent:withParameters: for details on stopping a timed event and (optionally) updating
*  parameters.
*
*  @code
*  - (void)userPurchasedSomethingCool
{
NSDictionary *params =
[NSDictionary dictionaryWithObjectsAndKeys:@&quot;Cool Item&quot;, // Parameter Value
@&quot;Item Purchased&quot;, // Parameter Name
nil];
[Flurry logEvent:@&quot;Something Cool Purchased&quot; withParameters:params];
// Give user cool item
}
*  @endcode
*
*  @param eventName Name of the event. For maximum effectiveness, we recommend using a naming scheme
*  that can be easily understood by non-technical people in your business domain.
*  @param parameters A map containing Name-Value pairs of parameters.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)logEvent:(NSString *)eventName withParameters:(NSDictionary *)parameters</Declaration>
			
			
			<Anchor>//api/name/logEvent:withParameters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/logError:message:exception:</TokenIdentifier>
			<Abstract type="html">*  @brief Records an app exception. Commonly used to catch unhandled exceptions.
*  @since 2.7
*
*  This method captures an exception for reporting to Flurry. We recommend adding an uncaught
*  exception listener to capture any exceptions that occur during usage that is not
*  anticipated by your app.
*
*  @see #logError:message:error: for details on capturing errors.
*
*  @code
  - (void) uncaughtExceptionHandler(NSException exception)
{
[Flurry logError:@&quot;Uncaught&quot; message:@&quot;Crash!&quot; exception:exception];
}</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)logError:(NSString *)errorID message:(NSString *)message exception:(NSException *)exception</Declaration>
			
			
			<Anchor>//api/name/logError:message:exception:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/logError:message:error:</TokenIdentifier>
			<Abstract type="html">*  @brief Records an app error.
*  @since 2.7
*
*  This method captures an error for reporting to Flurry.
*
*  @see #logError:message:exception: for details on capturing exceptions.
*
*  @code
  - (void) webView:(UIWebView )webView didFailLoadWithError:(NSError *)error
{
[Flurry logError:@&quot;WebView No Load&quot; message:[error localizedDescription] error:error];
}
*  @endcode
*
*  @param errorID Name of the error.
*  @param message The message to associate with the error.
*  @param error The error object to report.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)logError:(NSString *)errorID message:(NSString *)message error:(NSError *)error</Declaration>
			
			
			<Anchor>//api/name/logError:message:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/logEvent:timed:</TokenIdentifier>
			<Abstract type="html">*  @brief Records a timed event specified by @c eventName.
*  @since 2.8.4
*
*  This method overrides #logEvent to allow you to capture the length of an event. This can
*  be extremely valuable to understand the level of engagement with a particular action. For
*  example, you can capture how long a user spends on a level or reading an article.
*
*  @note You should not pass private or confidential information about your users in a
*  custom event. \n
*  Where applicable, you should make a concerted effort to use parameters with your timed
*  events (#logEvent:withParameters:timed:. This provides valuable information
*  around the characteristics of an action (e.g. - Buy Event that has a Parameter of Widget with
*  Value Golden Sword).
*
*  @see #logEvent:withParameters:timed: for details on storing timed events with parameters. \n
*  #endTimedEvent:withParameters: for details on stopping a timed event and (optionally) updating
*  parameters.
*
*  @code
*  - (void)startLevel
{
[Flurry logEvent:@&quot;Level Played&quot; timed:YES];
// Start user on level
}</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)logEvent:(NSString *)eventName timed:(BOOL)timed</Declaration>
			
			
			<Anchor>//api/name/logEvent:timed:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/logEvent:withParameters:timed:</TokenIdentifier>
			<Abstract type="html">*  @brief Records a custom parameterized timed event specified by @c eventName with @c parameters.
*  @since 2.8.4
*
*  This method overrides #logEvent to allow you to capture the length of an event with parameters.
*  This can be extremely valuable to understand the level of engagement with a particular action
*  and the characteristics associated with that action. For example, you can capture how long a user
*  spends on a level or reading an article. Parameters can be used to capture, for example, the
*  author of an article or if something was purchased while on the level.
*
*  @note You should not pass private or confidential information about your users in a
*  custom event.
*
*  @see #endTimedEvent:withParameters: for details on stopping a timed event and (optionally) updating
*  parameters.
*
*  @code
*  - (void)startLevel
{
NSDictionary *params =
[NSDictionary dictionaryWithObjectsAndKeys:@&quot;100&quot;, // Parameter Value
@&quot;Current Points&quot;, // Parameter Name
nil];</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)logEvent:(NSString *)eventName withParameters:(NSDictionary *)parameters timed:(BOOL)timed</Declaration>
			
			
			<Anchor>//api/name/logEvent:withParameters:timed:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/endTimedEvent:withParameters:</TokenIdentifier>
			<Abstract type="html">*  @brief Ends a timed event specified by @c eventName and optionally updates parameters with @c parameters.
*  @since 2.8.4
*
*  This method ends an existing timed event.  If parameters are provided, this will overwrite existing
*  parameters with the same name or create new parameters if the name does not exist in the parameter
*  map set by #logEvent:withParameters:timed:.
*
*  @note You should not pass private or confidential information about your users in a
*  custom event. \n
*  If the app is backgrounded prior to ending a timed event, the Flurry SDK will automatically
*  end the timer on the event. \n
*  #endTimedEvent:withParameters: is ignored if called on a previously
*  terminated event.
*
*  @see #logEvent:withParameters:timed: for details on starting a timed event with parameters.
*
*  @code
*  - (void)startLevel
{
NSDictionary *params =
[NSDictionary dictionaryWithObjectsAndKeys:@&quot;100&quot;, // Parameter Value
@&quot;Current Points&quot;, // Parameter Name
nil];</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)endTimedEvent:(NSString *)eventName withParameters:(NSDictionary *)parameters</Declaration>
			
			
			<Anchor>//api/name/endTimedEvent:withParameters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/logAllPageViews:</TokenIdentifier>
			<Abstract type="html">*  @brief Automatically track page views on a @c UINavigationController or @c UITabBarController.
*  @since 2.7
*
*  This method increments the page view count for a session based on traversing a UINavigationController
*  or UITabBarController. The page view count is only a counter for the number of transitions in your
*  app. It does not associate a name with the page count. To associate a name with a count of occurences
*  see #logEvent:.
*
*  @note Please make sure you assign the Tab and Navigation controllers to the view controllers before
*  passing them to this method.
*
*  @see #logPageView for details on explictly incrementing page view count.
*
*  @code
 -(void) trackViewsFromTabBar:(UITabBarController) tabBar
{
[Flurry logAllPageViews:tabBar];
}
*  @endcode
*
*  @param target The navigation or tab bar controller.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)logAllPageViews:(id)target</Declaration>
			
			
			<Anchor>//api/name/logAllPageViews:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/logPageView</TokenIdentifier>
			<Abstract type="html">*  @brief Explicitly track a page view during a session.
*  @since 2.7
*
*  This method increments the page view count for a session when invoked. It does not associate a name
*  with the page count. To associate a name with a count of occurences see #logEvent:.
*
*  @see #logAllPageViews for details on automatically incrementing page view count based on user
*  traversing navigation or tab bar controller.
*
*  @code
*  -(void) trackView
{
[Flurry logPageView];
}
*  @endcode
*</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)logPageView</Declaration>
			
			
			<Anchor>//api/name/logPageView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setUserID:</TokenIdentifier>
			<Abstract type="html">@brief Assign a unique id for a user in your app.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setUserID:(NSString *)userID</Declaration>
			<Parameters>
				<Parameter>
					<Name>userID</Name>
					<Abstract type="html">The app id for a user.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setUserID:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setAge:</TokenIdentifier>
			<Abstract type="html">@brief Set your user&apos;s age in years.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setAge:(int)age</Declaration>
			<Parameters>
				<Parameter>
					<Name>age</Name>
					<Abstract type="html">Reported age of user.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAge:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setGender:</TokenIdentifier>
			<Abstract type="html">@brief Set your user&apos;s gender.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setGender:(NSString *)gender</Declaration>
			<Parameters>
				<Parameter>
					<Name>gender</Name>
					<Abstract type="html">Reported gender of user.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setGender:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setLatitude:longitude:horizontalAccuracy:verticalAccuracy:</TokenIdentifier>
			<Abstract type="html">*  @brief Set the location of the session.
*  @since 2.7
*
*  Use information from the CLLocationManager to specify the location of the session. Flurry does not
*  automatically track this information or include the CLLocation framework.
*
*  @note Only the last location entered is captured per session. \n
*  Regardless of accuracy specified, the Flurry SDK will only report location at city level or higher. \n
*  Location is aggregated across all users of your app and not available on a per user basis. \n
*  This information should only be captured if it is germaine to the use of your app.
*
*  @code
CLLocationManager *locationManager = [[CLLocationManager alloc] init];
[locationManager startUpdatingLocation];
*  @endcode
*
*  After starting the location manager, you can set the location with Flurry. You can implement
*  CLLocationManagerDelegate to be aware of when the location is updated. Below is an example
*  of how to use this method, after you have recieved a location update from the locationManager.
*
*  @code
CLLocation *location = locationManager.location;
[Flurry  setLatitude:location.coordinate.latitude
            longitude:location.coordinate.longitude
   horizontalAccuracy:location.horizontalAccuracy
     verticalAccuracy:location.verticalAccuracy];
*  @endcode
*  @param latitude The latitude.
*  @param longitude The longitude.
*  @param horizontalAccuracy The radius of uncertainty for the location in meters.
*  @param verticalAccuracy The accuracy of the altitude value in meters.
*</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setLatitude:(double)latitude longitude:(double)longitude horizontalAccuracy:(float)horizontalAccuracy verticalAccuracy:(float)verticalAccuracy</Declaration>
			
			
			<Anchor>//api/name/setLatitude:longitude:horizontalAccuracy:verticalAccuracy:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setSessionReportsOnCloseEnabled:</TokenIdentifier>
			<Abstract type="html">@brief Set session to report when app closes.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/Flurry/setSessionReportsOnPauseEnabled:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (void)setSessionReportsOnCloseEnabled:(BOOL)sendSessionReportsOnClose</Declaration>
			<Parameters>
				<Parameter>
					<Name>sendSessionReportsOnClose</Name>
					<Abstract type="html">YES to send on close, NO to omit reporting on close.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSessionReportsOnCloseEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setSessionReportsOnPauseEnabled:</TokenIdentifier>
			<Abstract type="html">@brief Set session to report when app is sent to the background.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setSessionReportsOnPauseEnabled:(BOOL)setSessionReportsOnPauseEnabled</Declaration>
			<Parameters>
				<Parameter>
					<Name>setSessionReportsOnPauseEnabled</Name>
					<Abstract type="html">YES to send on pause, NO to omit reporting on pause.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSessionReportsOnPauseEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setEventLoggingEnabled:</TokenIdentifier>
			<Abstract type="html">@brief Enable custom event logging.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setEventLoggingEnabled:(BOOL)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">YES to enable event logging, NO to stop custom logging.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setEventLoggingEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Flurry/setPushToken:</TokenIdentifier>
			<Abstract type="html">@brief Set device push token.</Abstract>
			<DeclaredIn>Flurry.h</DeclaredIn>			
			
			<Declaration>+ (void)setPushToken:(NSString *)pushToken</Declaration>
			
			
			<Anchor>//api/name/setPushToken:</Anchor>
		</Token>
		
	</File>
</Tokens>